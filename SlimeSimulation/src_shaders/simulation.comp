#version 450

struct Particle
{
   vec2 pos;
   vec2 vel;
};

layout(std140, binding = 0) buffer Pos 
{
   Particle particles[ ];
};

layout(binding = 1) uniform UBO
{
    float time;
    uint particleCount;
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    // 1D workload 
    uint index = gl_GlobalInvocationID.x;
    if (index > particleCount) {
        return;
    }

    vec2 vPos = particles[index].pos;
    vec2 vVel = normalize(particles[index].vel);
    particles[index].vel = vVel;

    // collide with boundary
    if ((vPos.x < -1.0) || (vPos.x > 1.0)) {
        particles[index].vel = vec2(-vVel.x, vVel.y);
    }
    else if ((vPos.y < -1.0) || (vPos.y > 1.0)) {
        particles[index].vel = vec2(vVel.x, -vVel.y);
    }
    particles[index].pos += particles[index].vel * 0.0003;

}