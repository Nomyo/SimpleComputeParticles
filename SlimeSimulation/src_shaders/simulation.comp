#version 450

struct Particle
{
    vec4 pos;
    vec4 vel;
};

layout(std140, binding = 0) buffer Pos 
{
    Particle particles[ ];
};

layout(binding = 1) uniform UBO
{
    float elapsedTime;
    float destX;
    float destY;
    float destZ;
    uint particleCount;
} ubo;

vec3 attraction(vec3 particlePos) {
    float attractionConstant = 15.45;
    float attractorMass = 85;
    vec3 attractorPos = vec3(ubo.destX, ubo.destY, ubo.destZ);

    vec3 delta = attractorPos - particlePos;
    float r = clamp(sqrt(dot(delta, delta)), 0.5, 10.0);
    return normalize(delta) * attractionConstant * attractorMass / (r * r);
}

layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;
void main()
{
    // 1D workload
    uint index = gl_GlobalInvocationID.x;
    if (index > ubo.particleCount) {
        return;
    }

    float massParticle = 55;

    vec3 attractionForce = attraction(particles[index].pos.xyz);
    vec3 acceleration = attractionForce;

    vec3 vPos = particles[index].pos.xyz;
    vec3 vVel = particles[index].vel.xyz;

    particles[index].vel.xyz = vVel + acceleration * ubo.elapsedTime;
    particles[index].pos.xyz += vVel * ubo.elapsedTime + 1 / 2 * acceleration * ubo.elapsedTime * ubo.elapsedTime;
    vec3 newPos = particles[index].pos.xyz;
    // collide with boundary
    float slowFactor = 0.2;
    if ((newPos.x < -1.0) || (newPos.x > 1.0)) {
        particles[index].vel.xyz = vec3(-particles[index].vel.x, particles[index].vel.y, particles[index].vel.z) * slowFactor;
        particles[index].pos.xyz = vPos + vec3(-vVel.x, vVel.y, vVel.z) * ubo.elapsedTime + 1 / 2 * acceleration * ubo.elapsedTime * ubo.elapsedTime;
    }
    else if ((newPos.y < -1.0) || (newPos.y > 1.0)) {
        particles[index].vel.xyz = vec3(particles[index].vel.x, -particles[index].vel.y, particles[index].vel.z) * slowFactor;
        particles[index].pos.xyz = vPos + vec3(vVel.x, -vVel.y, vVel.z) * ubo.elapsedTime + 1 / 2 * acceleration * ubo.elapsedTime * ubo.elapsedTime;
    }
    else if ((newPos.z < -1.0) || (newPos.z > 1.0)) {
        particles[index].vel.xyz = vec3(particles[index].vel.x, particles[index].vel.y, -particles[index].vel.z) * slowFactor;
        particles[index].pos.xyz = vPos + vec3(vVel.x, vVel.y, -vVel.z) * ubo.elapsedTime + 1 / 2 * acceleration * ubo.elapsedTime * ubo.elapsedTime;
    }
}